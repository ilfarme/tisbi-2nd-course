program queue;
Type
  EXO = ^O;
  O = record
       Data : integer;
       Next : EXO;
  end;
Var
BeginO, EndO : EXO;
menu:byte;
Procedure push(Var BeginO, EndO : EXO; c : integer);
Var
  u : EXO;
Begin
  new(u);
  u^.Data := c;
  u^.Next := Nil;
  if BeginO =Nil
    then
      BeginO := u
    else
      EndO^.Next := u;
      EndO := u;
End;

Procedure pop(Var BeginO, EndO : EXO; Var c : integer);
Var
  u : EXO;
Function FreeO(x1 : EXO): boolean;
Begin
  FreeO := (x1=Nil);
End;
Begin
  if FreeO(BeginO)
    then
      writeln('Очередь пуста')
    else
      begin
        c := BeginO^.Data;
        u := BeginO;
        BeginO := BeginO^.Next;
        dispose(u);
      end;
End;

procedure isEmpty;
begin
WriteLn;
end;
procedure isFull;
begin
WriteLn;
end;

procedure printQueue;
begin
 WriteLn;
end;


BEGIN
  repeat
  WriteLn('1. Проверка пустоты');
  WriteLn('2. Проверка заполненности очереди');
  WriteLn('3. Добавление элемента в конец очереди');
  WriteLn('4. Удаление элемента из начала очереди');
  WriteLn('5. Вывод текущего состояния очереди на экран');
  WriteLn('6. Выход');
  WriteLn('7. Запасный выход');
  WriteLn('8. Аварийный выход');
  Write('Введите значение: ');
  ReadLn(menu);
  case menu of
  1: isEmpty;
  2: isFull;
  3: push;
  4: pop;
  5: printQueue;
  7: close;
  8: close;
  end;
  until menu=6;
END.
